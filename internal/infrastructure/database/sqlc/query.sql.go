// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAddressOfProfile = `-- name: CreateAddressOfProfile :exec

INSERT INTO address (profile_id, street, number, complement, district, zip_code, city, state, latitude, longitude, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW())
RETURNING ID
`

type CreateAddressOfProfileParams struct {
	ProfileID  pgtype.Int4 `db:"profile_id" json:"profile_id"`
	Street     string      `db:"street" json:"street"`
	Number     string      `db:"number" json:"number"`
	Complement pgtype.Text `db:"complement" json:"complement"`
	District   string      `db:"district" json:"district"`
	ZipCode    string      `db:"zip_code" json:"zip_code"`
	City       string      `db:"city" json:"city"`
	State      string      `db:"state" json:"state"`
	Latitude   pgtype.Text `db:"latitude" json:"latitude"`
	Longitude  pgtype.Text `db:"longitude" json:"longitude"`
}

// ############## Address ##############
func (q *Queries) CreateAddressOfProfile(ctx context.Context, arg CreateAddressOfProfileParams) error {
	_, err := q.db.Exec(ctx, createAddressOfProfile,
		arg.ProfileID,
		arg.Street,
		arg.Number,
		arg.Complement,
		arg.District,
		arg.ZipCode,
		arg.City,
		arg.State,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}

const createAddressOfStore = `-- name: CreateAddressOfStore :exec
INSERT INTO address (street, number, complement, district, zip_code, city, state, latitude, longitude, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW())
RETURNING ID
`

type CreateAddressOfStoreParams struct {
	Street     string      `db:"street" json:"street"`
	Number     string      `db:"number" json:"number"`
	Complement pgtype.Text `db:"complement" json:"complement"`
	District   string      `db:"district" json:"district"`
	ZipCode    string      `db:"zip_code" json:"zip_code"`
	City       string      `db:"city" json:"city"`
	State      string      `db:"state" json:"state"`
	Latitude   pgtype.Text `db:"latitude" json:"latitude"`
	Longitude  pgtype.Text `db:"longitude" json:"longitude"`
}

func (q *Queries) CreateAddressOfStore(ctx context.Context, arg CreateAddressOfStoreParams) error {
	_, err := q.db.Exec(ctx, createAddressOfStore,
		arg.Street,
		arg.Number,
		arg.Complement,
		arg.District,
		arg.ZipCode,
		arg.City,
		arg.State,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}

const createProfileAndReturnID = `-- name: CreateProfileAndReturnID :one
INSERT INTO profile (name, last_name, cpf, phone, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id
`

type CreateProfileAndReturnIDParams struct {
	Name     string `db:"name" json:"name"`
	LastName string `db:"last_name" json:"last_name"`
	Cpf      string `db:"cpf" json:"cpf"`
	Phone    string `db:"phone" json:"phone"`
}

// ############## Profile ##############
func (q *Queries) CreateProfileAndReturnID(ctx context.Context, arg CreateProfileAndReturnIDParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProfileAndReturnID,
		arg.Name,
		arg.LastName,
		arg.Cpf,
		arg.Phone,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createStore = `-- name: CreateStore :one
INSERT INTO store (name, active, cpf_cnpj, phone, score, address_id, created_at, updated_at)
    VALUES ($1, $2, $3, $4, 500, $5, NOW(), NOW())
    RETURNING ID
`

type CreateStoreParams struct {
	Name      string      `db:"name" json:"name"`
	Active    bool        `db:"active" json:"active"`
	CpfCnpj   string      `db:"cpf_cnpj" json:"cpf_cnpj"`
	Phone     string      `db:"phone" json:"phone"`
	AddressID pgtype.Int4 `db:"address_id" json:"address_id"`
}

// ############## Store ##############
func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStore,
		arg.Name,
		arg.Active,
		arg.CpfCnpj,
		arg.Phone,
		arg.AddressID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email, password, role, account_provider, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
`

type CreateUserParams struct {
	Email           string          `db:"email" json:"email"`
	Password        pgtype.Text     `db:"password" json:"password"`
	Role            UserRole        `db:"role" json:"role"`
	AccountProvider AccountProvider `db:"account_provider" json:"account_provider"`
}

// ############## Users ##############
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.AccountProvider,
	)
	return err
}

const createUserWithOAuth = `-- name: CreateUserWithOAuth :exec
INSERT INTO users (email, role, account_provider, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
`

type CreateUserWithOAuthParams struct {
	Email           string          `db:"email" json:"email"`
	Role            UserRole        `db:"role" json:"role"`
	AccountProvider AccountProvider `db:"account_provider" json:"account_provider"`
}

func (q *Queries) CreateUserWithOAuth(ctx context.Context, arg CreateUserWithOAuthParams) error {
	_, err := q.db.Exec(ctx, createUserWithOAuth, arg.Email, arg.Role, arg.AccountProvider)
	return err
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT id, name, last_name, cpf, phone FROM profile
WHERE id = $1
LIMIT 1
`

type GetProfileByIDRow struct {
	ID       int32  `db:"id" json:"id"`
	Name     string `db:"name" json:"name"`
	LastName string `db:"last_name" json:"last_name"`
	Cpf      string `db:"cpf" json:"cpf"`
	Phone    string `db:"phone" json:"phone"`
}

func (q *Queries) GetProfileByID(ctx context.Context, id int32) (GetProfileByIDRow, error) {
	row := q.db.QueryRow(ctx, getProfileByID, id)
	var i GetProfileByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Cpf,
		&i.Phone,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, name, last_name, cpf, phone FROM profile p
inner join (SELECT profile_id from users u where u.id = $1) u on p.id = u.profile_id
LIMIT 1
`

type GetProfileByUserIDRow struct {
	ID       int32  `db:"id" json:"id"`
	Name     string `db:"name" json:"name"`
	LastName string `db:"last_name" json:"last_name"`
	Cpf      string `db:"cpf" json:"cpf"`
	Phone    string `db:"phone" json:"phone"`
}

func (q *Queries) GetProfileByUserID(ctx context.Context, id pgtype.UUID) (GetProfileByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getProfileByUserID, id)
	var i GetProfileByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Cpf,
		&i.Phone,
	)
	return i, err
}

const getUser = `-- name: GetUser :many
SELECT id, profile_id, email, role, account_provider, created_at, updated_at FROM users
ORDER BY created_at desc
LIMIT $1 OFFSET $2
`

type GetUserParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetUserRow struct {
	ID              pgtype.UUID      `db:"id" json:"id"`
	ProfileID       pgtype.Int4      `db:"profile_id" json:"profile_id"`
	Email           string           `db:"email" json:"email"`
	Role            UserRole         `db:"role" json:"role"`
	AccountProvider AccountProvider  `db:"account_provider" json:"account_provider"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) ([]GetUserRow, error) {
	rows, err := q.db.Query(ctx, getUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRow
	for rows.Next() {
		var i GetUserRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Email,
			&i.Role,
			&i.AccountProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, profile_id, email, password, role, account_provider, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

type GetUserByEmailRow struct {
	ID              pgtype.UUID      `db:"id" json:"id"`
	ProfileID       pgtype.Int4      `db:"profile_id" json:"profile_id"`
	Email           string           `db:"email" json:"email"`
	Password        pgtype.Text      `db:"password" json:"password"`
	Role            UserRole         `db:"role" json:"role"`
	AccountProvider AccountProvider  `db:"account_provider" json:"account_provider"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.AccountProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, profile_id, email, role, account_provider, created_at, updated_at FROM users
WHERE id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	ID              pgtype.UUID      `db:"id" json:"id"`
	ProfileID       pgtype.Int4      `db:"profile_id" json:"profile_id"`
	Email           string           `db:"email" json:"email"`
	Role            UserRole         `db:"role" json:"role"`
	AccountProvider AccountProvider  `db:"account_provider" json:"account_provider"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Email,
		&i.Role,
		&i.AccountProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const linkAddressInStore = `-- name: LinkAddressInStore :exec
UPDATE store 
SET 
    address_id = $1,
    updated_at = NOW()
WHERE id = $2
`

type LinkAddressInStoreParams struct {
	AddressID pgtype.Int4 `db:"address_id" json:"address_id"`
	ID        int32       `db:"id" json:"id"`
}

func (q *Queries) LinkAddressInStore(ctx context.Context, arg LinkAddressInStoreParams) error {
	_, err := q.db.Exec(ctx, linkAddressInStore, arg.AddressID, arg.ID)
	return err
}

const linkOwnerInStore = `-- name: LinkOwnerInStore :exec
INSERT INTO owner (profile_id, store_id, created_at, updated_at)
    VALUES ($1, $2, NOW(), NOW())
`

type LinkOwnerInStoreParams struct {
	ProfileID pgtype.Int4 `db:"profile_id" json:"profile_id"`
	StoreID   pgtype.Int4 `db:"store_id" json:"store_id"`
}

func (q *Queries) LinkOwnerInStore(ctx context.Context, arg LinkOwnerInStoreParams) error {
	_, err := q.db.Exec(ctx, linkOwnerInStore, arg.ProfileID, arg.StoreID)
	return err
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profile
SET 
    name = $2,
    last_name = $3,
    phone = $4,
    updated_at = NOW()
WHERE id = (
    SELECT profile_id
    FROM users u
    WHERE u.id = $1
)
`

type UpdateProfileParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Name     string      `db:"name" json:"name"`
	LastName string      `db:"last_name" json:"last_name"`
	Phone    string      `db:"phone" json:"phone"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.Exec(ctx, updateProfile,
		arg.ID,
		arg.Name,
		arg.LastName,
		arg.Phone,
	)
	return err
}

const updateProfileCpf = `-- name: UpdateProfileCpf :exec
UPDATE profile
SET 
    cpf = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateProfileCpfParams struct {
	ID  int32  `db:"id" json:"id"`
	Cpf string `db:"cpf" json:"cpf"`
}

func (q *Queries) UpdateProfileCpf(ctx context.Context, arg UpdateProfileCpfParams) error {
	_, err := q.db.Exec(ctx, updateProfileCpf, arg.ID, arg.Cpf)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    email = $2,
    role = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID    pgtype.UUID `db:"id" json:"id"`
	Email string      `db:"email" json:"email"`
	Role  UserRole    `db:"role" json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Email, arg.Role)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET 
    password = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Password pgtype.Text `db:"password" json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE users
SET 
    profile_id = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserProfileParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	ProfileID pgtype.Int4 `db:"profile_id" json:"profile_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.Exec(ctx, updateUserProfile, arg.ID, arg.ProfileID)
	return err
}
