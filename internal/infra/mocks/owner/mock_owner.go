// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/owner/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/owner/repository.go -destination=internal/infra/mocks/owner/mock_owner.go
//

// Package mock_owner is a generated GoMock package.
package mock_owner

import (
	context "context"
	reflect "reflect"

	owner "github.com/oprimogus/cardapiogo/internal/domain/owner"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddOwner mocks base method.
func (m *MockRepository) AddOwner(ctx context.Context, userID, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOwner", ctx, userID, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOwner indicates an expected call of AddOwner.
func (mr *MockRepositoryMockRecorder) AddOwner(ctx, userID, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwner", reflect.TypeOf((*MockRepository)(nil).AddOwner), ctx, userID, storeID)
}

// DeleteOwner mocks base method.
func (m *MockRepository) DeleteOwner(ctx context.Context, userID, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwner", ctx, userID, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwner indicates an expected call of DeleteOwner.
func (mr *MockRepositoryMockRecorder) DeleteOwner(ctx, userID, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwner", reflect.TypeOf((*MockRepository)(nil).DeleteOwner), ctx, userID, storeID)
}

// IsOwner mocks base method.
func (m *MockRepository) IsOwner(ctx context.Context, userID, storeID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", ctx, userID, storeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockRepositoryMockRecorder) IsOwner(ctx, userID, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockRepository)(nil).IsOwner), ctx, userID, storeID)
}

// ListOwnersOfStore mocks base method.
func (m *MockRepository) ListOwnersOfStore(ctx context.Context, storeID string) ([]owner.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOwnersOfStore", ctx, storeID)
	ret0, _ := ret[0].([]owner.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwnersOfStore indicates an expected call of ListOwnersOfStore.
func (mr *MockRepositoryMockRecorder) ListOwnersOfStore(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwnersOfStore", reflect.TypeOf((*MockRepository)(nil).ListOwnersOfStore), ctx, storeID)
}
