// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/store/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/store/repository.go -destination=internal/infra/mocks/store/mock_store.go
//

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	store "github.com/oprimogus/cardapiogo/internal/domain/store"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateStore mocks base method.
func (m *MockRepository) CreateStore(ctx context.Context, params store.CreateStoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockRepositoryMockRecorder) CreateStore(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockRepository)(nil).CreateStore), ctx, params)
}

// DeleteStore mocks base method.
func (m *MockRepository) DeleteStore(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockRepositoryMockRecorder) DeleteStore(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockRepository)(nil).DeleteStore), ctx, ID)
}

// GetStoreByCpfCnpj mocks base method.
func (m *MockRepository) GetStoreByCpfCnpj(ctx context.Context, CpfCnpj string) (store.StoreDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreByCpfCnpj", ctx, CpfCnpj)
	ret0, _ := ret[0].(store.StoreDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreByCpfCnpj indicates an expected call of GetStoreByCpfCnpj.
func (mr *MockRepositoryMockRecorder) GetStoreByCpfCnpj(ctx, CpfCnpj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreByCpfCnpj", reflect.TypeOf((*MockRepository)(nil).GetStoreByCpfCnpj), ctx, CpfCnpj)
}

// GetStoreByID mocks base method.
func (m *MockRepository) GetStoreByID(ctx context.Context, ID string) (store.StoreDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreByID", ctx, ID)
	ret0, _ := ret[0].(store.StoreDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreByID indicates an expected call of GetStoreByID.
func (mr *MockRepositoryMockRecorder) GetStoreByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreByID", reflect.TypeOf((*MockRepository)(nil).GetStoreByID), ctx, ID)
}

// GetStoresListByFilter mocks base method.
func (m *MockRepository) GetStoresListByFilter(ctx context.Context, filter store.StoreFilter) ([]store.StoreSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoresListByFilter", ctx, filter)
	ret0, _ := ret[0].([]store.StoreSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoresListByFilter indicates an expected call of GetStoresListByFilter.
func (mr *MockRepositoryMockRecorder) GetStoresListByFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoresListByFilter", reflect.TypeOf((*MockRepository)(nil).GetStoresListByFilter), ctx, filter)
}

// UpdateStore mocks base method.
func (m *MockRepository) UpdateStore(ctx context.Context, params store.UpdateStoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStore", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStore indicates an expected call of UpdateStore.
func (mr *MockRepositoryMockRecorder) UpdateStore(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStore", reflect.TypeOf((*MockRepository)(nil).UpdateStore), ctx, params)
}

// UpdateStoreCpfCnpj mocks base method.
func (m *MockRepository) UpdateStoreCpfCnpj(ctx context.Context, params store.UpdateStoreCpfCnpjParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoreCpfCnpj", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoreCpfCnpj indicates an expected call of UpdateStoreCpfCnpj.
func (mr *MockRepositoryMockRecorder) UpdateStoreCpfCnpj(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoreCpfCnpj", reflect.TypeOf((*MockRepository)(nil).UpdateStoreCpfCnpj), ctx, params)
}
