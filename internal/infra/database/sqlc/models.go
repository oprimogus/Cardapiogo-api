// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountProvider string

const (
	AccountProviderGOOGLE     AccountProvider = "GOOGLE"
	AccountProviderAPPLE      AccountProvider = "APPLE"
	AccountProviderMETA       AccountProvider = "META"
	AccountProviderCARDAPIOGO AccountProvider = "CARDAPIOGO"
)

func (e *AccountProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountProvider(s)
	case string:
		*e = AccountProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountProvider: %T", src)
	}
	return nil
}

type NullAccountProvider struct {
	AccountProvider AccountProvider `json:"account_provider"`
	Valid           bool            `json:"valid"` // Valid is true if AccountProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountProvider) Scan(value interface{}) error {
	if value == nil {
		ns.AccountProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountProvider), nil
}

type CousineType string

const (
	CousineTypeITALIAN   CousineType = "ITALIAN"
	CousineTypeJAPANESE  CousineType = "JAPANESE"
	CousineTypeMEXICAN   CousineType = "MEXICAN"
	CousineTypeARABIC    CousineType = "ARABIC"
	CousineTypeBRAZILIAN CousineType = "BRAZILIAN"
	CousineTypeTHAI      CousineType = "THAI"
	CousineTypeAMERICAN  CousineType = "AMERICAN"
)

func (e *CousineType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CousineType(s)
	case string:
		*e = CousineType(s)
	default:
		return fmt.Errorf("unsupported scan type for CousineType: %T", src)
	}
	return nil
}

type NullCousineType struct {
	CousineType CousineType `json:"cousine_type"`
	Valid       bool        `json:"valid"` // Valid is true if CousineType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCousineType) Scan(value interface{}) error {
	if value == nil {
		ns.CousineType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CousineType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCousineType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CousineType), nil
}

type OrderStatus string

const (
	OrderStatusCREATED    OrderStatus = "CREATED"
	OrderStatusACCEPTED   OrderStatus = "ACCEPTED"
	OrderStatusINPROGRESS OrderStatus = "IN_PROGRESS"
	OrderStatusFINISHED   OrderStatus = "FINISHED"
	OrderStatusCANCELED   OrderStatus = "CANCELED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type PaymentForm string

const (
	PaymentFormCREDITCARD PaymentForm = "CREDIT_CARD"
	PaymentFormDEBITCARD  PaymentForm = "DEBIT_CARD"
	PaymentFormPIX        PaymentForm = "PIX"
	PaymentFormCASH       PaymentForm = "CASH"
)

func (e *PaymentForm) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentForm(s)
	case string:
		*e = PaymentForm(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentForm: %T", src)
	}
	return nil
}

type NullPaymentForm struct {
	PaymentForm PaymentForm `json:"payment_form"`
	Valid       bool        `json:"valid"` // Valid is true if PaymentForm is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentForm) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentForm, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentForm.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentForm) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentForm), nil
}

type ShopType string

const (
	ShopTypeRESTAURANT  ShopType = "RESTAURANT"
	ShopTypePHARMACY    ShopType = "PHARMACY"
	ShopTypeTOBBACO     ShopType = "TOBBACO"
	ShopTypeMARKET      ShopType = "MARKET"
	ShopTypeCONVENIENCE ShopType = "CONVENIENCE"
	ShopTypePUB         ShopType = "PUB"
)

func (e *ShopType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShopType(s)
	case string:
		*e = ShopType(s)
	default:
		return fmt.Errorf("unsupported scan type for ShopType: %T", src)
	}
	return nil
}

type NullShopType struct {
	ShopType ShopType `json:"shop_type"`
	Valid    bool     `json:"valid"` // Valid is true if ShopType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShopType) Scan(value interface{}) error {
	if value == nil {
		ns.ShopType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShopType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShopType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShopType), nil
}

type UserRole string

const (
	UserRoleCUSTOMER    UserRole = "CUSTOMER"
	UserRoleOWNER       UserRole = "OWNER"
	UserRoleEMPLOYEE    UserRole = "EMPLOYEE"
	UserRoleDELIVERYMAN UserRole = "DELIVERY_MAN"
	UserRoleADMIN       UserRole = "ADMIN"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Weekday string

const (
	WeekdayMONDAY    Weekday = "MONDAY"
	WeekdayTUESDAY   Weekday = "TUESDAY"
	WeekdayWEDNESDAY Weekday = "WEDNESDAY"
	WeekdayTHURSDAY  Weekday = "THURSDAY"
	WeekdayFRIDAY    Weekday = "FRIDAY"
	WeekdaySATURDAY  Weekday = "SATURDAY"
	WeekdaySUNDAY    Weekday = "SUNDAY"
)

func (e *Weekday) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Weekday(s)
	case string:
		*e = Weekday(s)
	default:
		return fmt.Errorf("unsupported scan type for Weekday: %T", src)
	}
	return nil
}

type NullWeekday struct {
	Weekday Weekday `json:"weekday"`
	Valid   bool    `json:"valid"` // Valid is true if Weekday is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeekday) Scan(value interface{}) error {
	if value == nil {
		ns.Weekday, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Weekday.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeekday) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Weekday), nil
}

type Address struct {
	ID         int32            `db:"id" json:"id"`
	ProfileID  pgtype.Int4      `db:"profile_id" json:"profile_id"`
	Street     string           `db:"street" json:"street"`
	Number     string           `db:"number" json:"number"`
	Complement pgtype.Text      `db:"complement" json:"complement"`
	District   string           `db:"district" json:"district"`
	ZipCode    string           `db:"zip_code" json:"zip_code"`
	City       string           `db:"city" json:"city"`
	State      string           `db:"state" json:"state"`
	Latitude   pgtype.Text      `db:"latitude" json:"latitude"`
	Longitude  pgtype.Text      `db:"longitude" json:"longitude"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type BusinessHours struct {
	StoreID     pgtype.Int4 `db:"store_id" json:"store_id"`
	Weekday     NullWeekday `db:"weekday" json:"weekday"`
	OpeningTime pgtype.Text `db:"opening_time" json:"opening_time"`
	ClosingTime pgtype.Text `db:"closing_time" json:"closing_time"`
}

type Employee struct {
	ID        int32            `db:"id" json:"id"`
	ProfileID pgtype.Int4      `db:"profile_id" json:"profile_id"`
	StoreID   pgtype.Int4      `db:"store_id" json:"store_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type Item struct {
	ID           int32            `db:"id" json:"id"`
	RestaurantID pgtype.Int4      `db:"restaurant_id" json:"restaurant_id"`
	Name         pgtype.Text      `db:"name" json:"name"`
	Description  pgtype.Text      `db:"description" json:"description"`
	Img          pgtype.Text      `db:"img" json:"img"`
	Amount       pgtype.Int4      `db:"amount" json:"amount"`
	Score        pgtype.Int4      `db:"score" json:"score"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt    pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type Order struct {
	ID            int32            `db:"id" json:"id"`
	ProfileID     pgtype.Int4      `db:"profile_id" json:"profile_id"`
	ShippingValue pgtype.Int4      `db:"shipping_value" json:"shipping_value"`
	Amount        pgtype.Int4      `db:"amount" json:"amount"`
	Status        NullOrderStatus  `db:"status" json:"status"`
	Details       pgtype.Text      `db:"details" json:"details"`
	CreatedAt     pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type OrderItem struct {
	OrderID pgtype.Int4 `db:"order_id" json:"order_id"`
	ItemID  pgtype.Int4 `db:"item_id" json:"item_id"`
}

type Owner struct {
	ProfileID pgtype.Int4      `db:"profile_id" json:"profile_id"`
	StoreID   pgtype.Int4      `db:"store_id" json:"store_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type Profile struct {
	ID        int32            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	LastName  string           `db:"last_name" json:"last_name"`
	Cpf       string           `db:"cpf" json:"cpf"`
	Phone     string           `db:"phone" json:"phone"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type Store struct {
	ID        int32            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Active    bool             `db:"active" json:"active"`
	CpfCnpj   string           `db:"cpf_cnpj" json:"cpf_cnpj"`
	Phone     string           `db:"phone" json:"phone"`
	Score     int32            `db:"score" json:"score"`
	AddressID pgtype.Int4      `db:"address_id" json:"address_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type StorePaymentMethod struct {
	ID          pgtype.Int4     `db:"id" json:"id"`
	PaymentForm NullPaymentForm `db:"payment_form" json:"payment_form"`
}

type StoreRestaurantType struct {
	ID             pgtype.Int4     `db:"id" json:"id"`
	RestaurantType NullCousineType `db:"restaurant_type" json:"restaurant_type"`
}

type StoreType struct {
	ID   pgtype.Int4  `db:"id" json:"id"`
	Type NullShopType `db:"type" json:"type"`
}

type Users struct {
	ID              pgtype.UUID      `db:"id" json:"id"`
	ProfileID       pgtype.Int4      `db:"profile_id" json:"profile_id"`
	Email           string           `db:"email" json:"email"`
	Password        pgtype.Text      `db:"password" json:"password"`
	Role            UserRole         `db:"role" json:"role"`
	AccountProvider AccountProvider  `db:"account_provider" json:"account_provider"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt       pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}
