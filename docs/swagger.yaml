basePath: /api
consumes:
- application/json
definitions:
  authentication.SignInParams:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  entity.ShopType:
    enum:
    - restaurant
    - pharmacy
    - tobbaco
    - market
    - convenience
    - pub
    type: string
    x-enum-varnames:
    - StoreShopRestaurant
    - StoreShopPharmacy
    - StoreShopTobbaco
    - StoreShopMarket
    - StoreShopConvenience
    - StoreShopPub
  entity.UserRole:
    enum:
    - consumer
    - owner
    - employee
    - delivery_man
    - admin
    type: string
    x-enum-varnames:
    - UserRoleConsumer
    - UserRoleOwner
    - UserRoleEmployee
    - UserRoleDeliveryMan
    - UserRoleAdmin
  object.Address:
    properties:
      addressLine1:
        maxLength: 40
        type: string
      addressLine2:
        maxLength: 20
        type: string
      city:
        maxLength: 25
        type: string
      country:
        maxLength: 15
        type: string
      latitude:
        type: string
      longitude:
        type: string
      neighborhood:
        maxLength: 25
        type: string
      postalCode:
        maxLength: 15
        type: string
      state:
        maxLength: 15
        type: string
    required:
    - addressLine1
    - addressLine2
    - city
    - country
    - neighborhood
    - postalCode
    - state
    type: object
  object.JWT:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      id_token:
        type: string
      not-before-policy:
        type: integer
      refresh_expires_in:
        type: integer
      refresh_token:
        type: string
      scope:
        type: string
      session_state:
        type: string
      token_type:
        type: string
    type: object
  store.CreateParams:
    properties:
      address:
        $ref: '#/definitions/object.Address'
      cpfCnpj:
        type: string
      name:
        maxLength: 25
        type: string
      phone:
        type: string
      type:
        $ref: '#/definitions/entity.ShopType'
    required:
    - address
    - cpfCnpj
    - name
    - phone
    - type
    type: object
  store.UpdateParams:
    type: object
  user.AddRolesParams:
    properties:
      role:
        items:
          $ref: '#/definitions/entity.UserRole'
        type: array
    required:
    - role
    type: object
  user.CreateParams:
    properties:
      email:
        type: string
      password:
        type: string
      profile:
        $ref: '#/definitions/user.CreateProfileParams'
    required:
    - email
    - password
    - profile
    type: object
  user.CreateProfileParams:
    properties:
      document:
        type: string
      lastName:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - document
    - lastName
    - name
    - phone
    type: object
  user.UpdateProfileParams:
    properties:
      lastName:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - lastName
    - name
    - phone
    type: object
  xerrors.ErrorResponse:
    properties:
      debug: {}
      details: {}
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: gustavo081900@gmail.com
    name: Gustavo Ferreira de Jesus
  description: Documentação da API de delivery Cardapiogo.
  title: Cardapiogo API
  version: "1.0"
paths:
  /v1/auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticate a user using email and password and issue a JWT on
        successful login.
      parameters:
      - description: SignInParams
        in: body
        name: request
        schema:
          $ref: '#/definitions/authentication.SignInParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/object.JWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
      summary: Sign-In with email and password
      tags:
      - Authentication
  /v1/auth/sign-up:
    post:
      consumes:
      - application/json
      description: Sign-Up with local credentials and data
      parameters:
      - description: CreateUserParams
        in: body
        name: request
        schema:
          $ref: '#/definitions/user.CreateParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
      summary: Sign-Up with local credentials and data
      tags:
      - Authentication
  /v1/store:
    post:
      consumes:
      - application/json
      description: Owner user can create store
      parameters:
      - description: CreateParams
        in: body
        name: request
        schema:
          $ref: '#/definitions/store.CreateParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
      summary: Owner can create stores.
      tags:
      - Store
    put:
      consumes:
      - application/json
      description: Owner can update your stores.
      parameters:
      - description: UpdateParams
        in: body
        name: request
        schema:
          $ref: '#/definitions/store.UpdateParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
      summary: Owner can update your stores.
      tags:
      - Store
  /v1/user:
    put:
      consumes:
      - application/json
      description: Update user profile
      parameters:
      - description: UpdateProfileParams
        in: body
        name: request
        schema:
          $ref: '#/definitions/user.UpdateProfileParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
      security:
      - Bearer Token: []
      summary: Update user profile
      tags:
      - User
  /v1/user/roles:
    post:
      consumes:
      - application/json
      description: Add a new role for user
      parameters:
      - description: AddRolesParams
        in: body
        name: request
        schema:
          $ref: '#/definitions/user.AddRolesParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/xerrors.ErrorResponse'
      security:
      - Bearer Token: []
      summary: Add a new role for user
      tags:
      - User
produces:
- application/json
securityDefinitions:
  Bearer Token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
